Creating a distributed application conforming to the CORBA standard usually consists
of the following steps:

1. Define the IDL specification
2. Compile the IDL specification to the implementation language
3. Implement the server based on the generated source code
4. Implement the client,
5. Run the ORB daemon, the server and client


The Server:

Preparing the server involves implementing the methods specified in the IDL.
IDL generate stub and skeleton code which consists of only declarations of what
will be implemented in the project, the implementation is done in the implementation
language. It is also neccessary to add the code for initializing the CORBA system and
to install the service. Uusally these actions are delegared to the main() method of some
additional class. If we use a POA adapter then it may follow as such:

1. Create and initialize the ORB,
2. Get a reference to the root POA and activate the POAManager
3. Create a server object and store a reference to it,
4. Retrieve a reference to the naming service,
5. Register the server under some name,
6. Wait for clients. 


The Client:

A client application must obtain a reference to that of the server object.
Similar to RMI (Remote Method Invocation) the server object is represented locally
by a stub. A reference to the server is retrieved via the naming service, hence
we must first access this service as in the server side. 

1. Create and initialize the ORB
2. Get a reference to the naming service
3. Get a reference to the server object by means of its name
4. Call server object methods. 

A client may invoke any methods of the server object which were declared within the IDL
interface of which the server implements. 



IDL:

    Components:

        The highest level of structure in the heirarchy is module (maps to java package).

            module Example {
                // interfaces and data types here
            };

        Modules are designed for grouping interfaces within a single namespace. 

        An interface is introduced with the keyword "interface" (maps to java interface):

            module Example {
                interface Operations {
                    // declaration of methods and attributes
                };
            }; // remember semi-colons!


    Data-Types:

        Basic IDL data types are similar to those of regular programing languages. 

        Primitive Types:

                IDL                       Java            Desc
         short, unsigned short           short          16 bit int
         long, unsigned long             int            32 bit int 
         long long, unsigned long long   long           64 bit int 
         float                           float          32 bit float 
         double                          double         64 bit float 
         char, wchar                     char           8 or 16 bit char 
         boolean                         boolean        boolean value  
         octet                           byte           non-interpreted character

        besides these there also exists the special type "any" which represents
        any primitive or compound type. Octet is not subject to any conversions
        when transferred betwee systems.

    
    Array Types:

        These types are used to represent data of varable size
        the keyword sequence<type> declares a vector of elements of the type type with
        unspecified length.

        sequence<string> message;
        sequence<char, 80> line; 

        (maps to Java array)

    compound types:

        Compound types comprise of primitive or compound types. It is invoked with the
        keyword typedef or struct. 

        typedef sring name;
        typedef sequence<string> names;

        structures:
            the keyword struct defines a structure used for grouping attributes:

                struct Person {
                    string name;
                    int age;
                };


    Exceptions:
        An exception may be declared on a module level or on an interface level 
        using the keyword exception:

            exception Error {};

            (maps to Java exception i.e. to its class)


    Operations:

        IDL operations map to Java methods, the syntact is similar to that of java:

            type name(parameterList);
            type name(parameterList) raises(Exceptionname);


Example: File Transfer 

    Demonstrating the CORBA technology on the example of the program for downloading files
    from the remote server. 

Application Structure:

    The server is an object of the class FileServant, this provides services defined 
    in the interface file FileTransferFace.idl. The services include: 
    
        1. list directory contents
        2. download a file 
        3. retrieving file information 
        4. the main() method -> where the CORBA environment is initialised

    It initialises the CORBA environment and gets data from the server. At the end
    it creates an object of the class FileTransferGUI which is responsible to user
    interaction. 

    the ORB daemon uses a well-known port number 900 for network communicaiton,
    as this is a reserved port and requires admin permissions for installing the 
    service. Here the unrestricted port number of 2004 is used. It requires additional
    options of supplements in the source code. 
    
     
